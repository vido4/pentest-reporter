import {Injectable} from '@angular/core';
import {Report} from './report';
import {Observable, of} from 'rxjs';
import {Vulnerability} from './vulnerability';
import {Impact} from './impact';
import {HttpClient, HttpHeaders} from '@angular/common/http';
import {catchError, tap} from 'rxjs/operators';

const httpOptions = {
    headers: new HttpHeaders({'Content-Type': 'application/json'})
};

@Injectable({
    providedIn: 'root'
})

export class ReportService {

    private impactUrl = 'http://localhost:4444/api/impact';
    private vulnUrl = 'http://localhost:4444/api/vuln';
    private reportUrl = 'http://localhost:4444/api/report';

    constructor(private http: HttpClient) {
    }

    getReports(): Observable<Report[]> {
        return this.http.get<Report[]>(this.reportUrl)
            .pipe(
                catchError(this.handleError('getReports', []))
            );
    }

    getReport(id: number): Observable<Report> {
        return this.http.get<Report>(this.reportUrl + '/' + id)
            .pipe(
                catchError(this.handleError<Report>('getReport'))
            );
    }

    addReport(report: Report): Observable<Report> {
        return this.http.post<Report>(this.reportUrl, report, httpOptions)
            .pipe(
                tap(_ => console.log('added report')),
                catchError(this.handleError<Report>('addReport'))
            );
    }

    updateReport(report: Report): Observable<Report> {
        return this.http.put<Report>(this.reportUrl + '/' + report._id, report, httpOptions)
            .pipe(
                tap(_ => console.log('updated report')),
                catchError(this.handleError<Report>('updateReport'))
            );
    }

    getVulnerabilities(): Observable<Vulnerability[]> {
        return this.http.get<Vulnerability[]>(this.vulnUrl)
            .pipe(
                catchError(this.handleError('getVulnerabilities', []))
            );
    }

    deleteVulnerability(vuln: Vulnerability | number): Observable<Vulnerability> {
        const id = typeof vuln === 'number' ? vuln : vuln._id;
        const url = `${this.vulnUrl}/${id}`;

        return this.http.delete<Vulnerability>(url, httpOptions).pipe(
            catchError(this.handleError<Vulnerability>('deleteVulnerability'))
        );
    }


    addVulnerability(vuln: Vulnerability): Observable<Vulnerability> {
        return this.http.post<Vulnerability>(this.vulnUrl, vuln, httpOptions)
            .pipe(
                tap(_ => console.log('added vuln')),
                catchError(this.handleError<Vulnerability>('addVulnerability'))
            );
    }

    getImpacts(): Observable<Impact[]> {
        return this.http.get<Impact[]>(this.impactUrl)
            .pipe(
                catchError(this.handleError('getImpacts', []))
            );
    }

    private handleError<T>(operation = 'operation', result?: T) {
        return (error: any): Observable<T> => {
            console.error(error); // log to console instead
            // Let the app keep running by returning an empty result.
            return of(result as T);
        };
    }

}
