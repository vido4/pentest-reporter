//Require mongoose package

const mongoose = require('mongoose');
const vuln = require('./vuln');
const AutoIncrement = require('mongoose-sequence')(mongoose);

const vulnSchema = vuln.vulnSchema;

const reportSchema = mongoose.Schema({
    _id: Number,
    company: {
        type: String,
        required: true
    },
    methodology: String,
    vulns: [vulnSchema],
    // vulns: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Vulnerability' }],
    summary: String,
}, { versionKey: false });

reportSchema.plugin(AutoIncrement, {id: 'report_seq'});

// // Use pre middleware
// reportSchema.pre('save', function (next) {
//
//     // Only increment when the document is new
//     if (this.isNew) {
//         Report.count().then(res => {
//             this._id = res; // Increment count
//             next();
//         });
//     } else {
//         next();
//     }
// });


const Report = module.exports = mongoose.model('Report', reportSchema);

module.exports.getAllReports = (callback) => {
    Report.find(callback);
};

module.exports.getReportById = (id, callback) => {
    let query = {_id: id};
    Report.findOne(query, callback);
};

//newList.save is used to insert the document into MongoDB
module.exports.addReport = (newReport, callback) => {
    newReport.save(callback);
};

//newList.save is used to insert the document into MongoDB
module.exports.updateReport = (id, newReport, callback) => {
    let query = {_id: id};
    Report.findOneAndUpdate(query, newReport, callback);
};

//Here we need to pass an id parameter to BUcketList.remove
module.exports.deleteReportById = (id, callback) => {
    let query = {_id: id};
    Report.remove(query, callback);
};
