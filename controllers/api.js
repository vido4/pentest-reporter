//Require the express package and use express.Router()
const express = require('express');
const router = express.Router();

const report = require('../models/report');
const impact = require('../models/impact');
const vuln = require('../models/vuln');

//GET HTTP method to /reports
router.get('/impact', (req, res) => {
    impact.getAllImpacts((err, impacts) => {
        if (err) {
            res.json({success: false, message: `Failed to load all reports. Error: ${err}`});
        }
        else {
            res.write(JSON.stringify(impacts));
            res.end();
        }
    });
});

router.post('/impact', (req, res, next) => {
    let newImpact = new impact({
        _id: req.body.id,
        level: req.body.level
    });
    impact.addImpact(newImpact, (err, impact) => {
        if (err) {
            res.json({success: false, message: `Failed to create new impact. Error: ${err}`});

        }
        else
            res.json({success: true, message: "Added successfully."});
    });
});

////////////Vulns

router.get('/vuln', (req, res) => {
    vuln.getAllVulns((err, vulns) => {
        if (err) {
            res.json({success: false, message: `Failed to load all vulns. Error: ${err}`});
        }
        else {
            res.write(JSON.stringify(vulns));
            res.end();
        }
    });
});

router.post('/vuln', (req, res, next) => {
    let newVuln = new vuln({
        impactLevel: req.body.impactLevel,
        title: req.body.title,
        issue: req.body.issue,
        remediation: req.body.remediation,
    });
    vuln.addVuln(newVuln, (err, vuln) => {
        if (err) {
            res.json({success: false, message: `Failed to create new vuln. Error: ${err}`});
        }
        else
            res.json({success: true, message: "Added successfully."});
    });
});



router.delete('/vuln/:id', (req, res, next) => {
    //access the parameter which is the id of the item to be deleted
    let id = req.params.id;
    //Call the model method deleteListById
    vuln.deleteVulnById(id, (err, impact) => {
        if (err) {
            res.json({success: false, message: `Failed to delete vuln. Error: ${err}`});
        }
        else if (impact) {
            res.json({success: true, message: "Deleted successfully"});
        }
        else
            res.json({success: false});
    })
});


//////REPORTS

router.get('/report', (req, res) => {
    report.getAllReports((err, reports) => {
        if (err) {
            res.json({success: false, message: `Failed to load all reports. Error: ${err}`});
        }
        else {
            res.write(JSON.stringify(reports));
            res.end();
        }
    });
});

router.get('/report/:id', (req, res) => {
    let id = req.params.id;

    report.getReportById(id, (err, report) => {
        if (err) {
            res.json({success: false, message: `Failed to load all reports. Error: ${err}`});
        }
        else {
            res.write(JSON.stringify(report));
            res.end();
        }
    });
});

router.post('/report', (req, res, next) => {
    // _id: Number,
    //     company: {
    //     type: String,
    //         required: true
    // },
    // methodology: String,
    //     vulns: [vulnSchema],
    //     // vulns: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Vulnerability' }],
    //     summary: String,
    let newReport = new report({
        company: req.body.company,
        methodology: req.body.methodology,
        vulns: req.body.vulns,
        summary: req.body.summary,
    });
    report.addReport(newReport, (err, vuln) => {
        if (err) {
            res.json({success: false, message: `Failed to create new report. Error: ${err}`});
        }
        else
            res.json({success: true, message: "Added successfully."});
    });
});



router.put('/report/:id', (req, res, next) => {
    //access the parameter which is the id of the item to be deleted
    let id = req.params.id;
    let newReport = new report({
        company: req.body.company,
        methodology: req.body.methodology,
        vulns: req.body.vulns,
        summary: req.body.summary,
    });
    //Call the model method deleteListById
    report.updateReport(id, newReport,(err, impact) => {
        if (err) {
            res.json({success: false, message: `Failed to update report. Error: ${err}`});
        }
        else if (impact) {
            res.json({success: true, message: "Updated successfully"});
        }
        else
            res.json({success: false});
    })
});


module.exports = router;
