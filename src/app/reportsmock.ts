import {Report} from './report';
import {Vulnerability} from './vulnerability';
import {Impact} from './impact';

export const IMPACT: Impact[] = [
    {id: 1, level: 'High'},
    {id: 2, level: 'Medium'},
    {id: 3, level: 'Low'},
    {id: 4, level: 'Informational'}
];

export const VULNS: Vulnerability[] = [
    {
        id: 1, title: 'Cross-site scripting (stored)', impactLevel: IMPACT[0],
        issue: 'Stored cross-site scripting vulnerabilities arise when user input is stored and later embedded into the ' +
            'application\'s responses in an unsafe way. An attacker can use the vulnerability to inject malicious JavaScript ' +
            'code into the application, which will execute within the browser of any user who views the relevant application content.',
        remediation: 'In cases where the application\'s functionality allows users to author content using a restricted subset' +
            ' of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is' +
            ' necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.'
    },
    {
        id: 2, title: 'Cross-site scripting (reflected)', impactLevel: IMPACT[0],
        issue: 'Reflected cross-site scripting vulnerabilities arise when data is copied ' +
            'from a request and echoed into the application\'s immediate response in an unsafe way. ' +
            'An attacker can use the vulnerability to construct a request that, if issued by another ' +
            'application user, will cause JavaScript code supplied by the attacker to execute within ' +
            'the user\'s browser in the context of that user\'s session with the application.',
        remediation: 'In cases where the application\'s functionality allows users to author content using a restricted subset' +
            ' of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is' +
            ' necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.'
    },
    {
        id: 3, title: 'SQL Injection', impactLevel: IMPACT[0],
        issue: 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in ' +
            'an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input' +
            ' appears and interfere with the structure of the surrounding query.',
        remediation: 'The most effective way to prevent SQL injection attacks is to use parameterized queries' +
            ' (also known as prepared statements) for all database access. This method uses two steps to incorporate' +
            ' potentially tainted data into SQL queries: first, the application specifies the structure of the query, ' +
            'leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. '
    },
    {
        id: 4, title: 'XML Injection', impactLevel: IMPACT[1],
        issue: 'XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document ' +
            'or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure ' +
            'of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere' +
            ' with the application\'s logic, to perform unauthorized actions or access sensitive data.',
        remediation: 'The application should validate or sanitize user input before incorporating it into' +
            ' an XML document or SOAP message. It may be possible to block any input containing XML metacharacters' +
            ' such as < and >. Alternatively, these characters can be replaced with the corresponding entities: &lt; and &gt;.'
    },
    {
        id: 5, title: 'Open Redirection (stored)', impactLevel: IMPACT[1],
        issue: 'Open redirection vulnerabilities arise when an application incorporates user-controllable ' +
            'data into the target of a redirection in an unsafe way. An attacker can construct a URL within ' +
            'the application that causes a redirection to an arbitrary external domain. This behavior can be ' +
            'leveraged to facilitate phishing attacks against users of the application. ',
        remediation: 'If possible, applications should avoid incorporating user-controllable data ' +
            'into redirection targets. In many cases, this behavior can be avoided in two ways'
    },
    {
        id: 6, title: 'Cookie without HttpOnly flag set', impactLevel: IMPACT[2],
        issue: 'If the HttpOnly attribute is set on a cookie, then the cookie\'s value cannot be read or set ' +
            'by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting,' +
            ' slightly harder to exploit by preventing them from trivially capturing the cookie\'s value via an injected script.',
        remediation: 'There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require ' +
            'legitimate client-side scripts within your application to read or set a cookie\'s value, you should set the HttpOnly ' +
            'flag by including this attribute within the relevant Set-cookie directive.'
    },
    {
        id: 7, title: 'Directory listing', impactLevel: IMPACT[3],
        issue: 'Web servers can be configured to automatically list the contents of directories that do not have an index' +
            ' page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, ' +
            'and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive ' +
            'files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.',
        remediation: 'There is not usually any good reason to provide directory listings, and disabling them may place additional ' +
            'hurdles in the path of an attacker. This can normally be achieved in two ways:'
    },
];

export const REPORTS: Report[] = [
    {
        id: 1, title: 'Company1', methodology: 'LongStringNumber01',
        vulns: [VULNS[0], VULNS[4], VULNS[5]], summary: 'LongStringNumber02'
    },
    {
        id: 2, title: 'Company2', methodology: 'LongStringNumber11',
        vulns: [VULNS[1], VULNS[7], VULNS[5]], summary: 'LongStringNumber12'
    },
    {
        id: 3, title: 'Company3', methodology: 'LongStringNumber21',
        vulns: [VULNS[0], VULNS[1], VULNS[6], VULNS[4], VULNS[5]], summary: 'LongStringNumber22'
    },
    {
        id: 4, title: 'Company4', methodology: 'LongStringNumber31',
        vulns: [VULNS[7]], summary: 'LongStringNumber32'
    },
    {
        id: 5, title: 'Company5', methodology: 'LongStringNumber41',
        vulns: [VULNS[0], VULNS[1], VULNS[2], VULNS[3]], summary: 'LongStringNumber42'
    }
];
